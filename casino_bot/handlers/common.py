"""Common command handlers."""
from __future__ import annotations

from datetime import datetime, timedelta
from typing import Optional


from aiogram import Dispatcher, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import CallbackQuery, Message

from ..keyboards import main_menu
from ..utils.context import BotContext

router = Router()


def _get_context(dispatcher: Dispatcher) -> BotContext:
    ctx: Optional[BotContext] = dispatcher.data.get("context")  # type: ignore[assignment]
    if ctx is None:
        raise RuntimeError("Bot context is not initialised")
    return ctx


async def _format_profile(ctx: BotContext, user_id: int) -> str:
    wallet = await ctx.economy.get_wallet(user_id)
    overview = await ctx.progression.get_profile(user_id)
    transactions = await ctx.storage.get_recent_transactions(user_id)
    games = await ctx.storage.get_recent_games(user_id)
    win_rate = (
        overview.stats.wins / overview.stats.games_played * 100
        if overview.stats.games_played
        else 0
    )
    lines = [
        f"–ë–∞–ª–∞–Ω—Å: {wallet.balance} —á–∏–ø–æ–≤",
        f"–£—Ä–æ–≤–µ–Ω—å: {overview.level} (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: {overview.xp_to_next} XP)",
        f"–ö–ª—É–± –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {overview.loyalty_tier.name} x{overview.loyalty_tier.bonus_multiplier:.2f}",
        f"–°—ã–≥—Ä–∞–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: {overview.stats.games_played}",
        f"–í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%",
        f"–°—É–º–º–∞—Ä–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {overview.stats.total_wagered}",
        f"–°—É–º–º–∞—Ä–Ω–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {overview.stats.total_won}",
        f"–õ—É—á—à–∏–π –≤—ã–∏–≥—Ä—ã—à –∑–∞ —Ä–∞—É–Ω–¥: {overview.stats.biggest_win}",
        f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(overview.achievements)}",
    ]
    if wallet.last_daily_bonus:
        next_bonus = wallet.last_daily_bonus + timedelta(hours=24)
        if next_bonus > datetime.utcnow():
            remaining = next_bonus - datetime.utcnow()
            lines.append(
                "–°–ª–µ–¥—É—é—â–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑: "
                f"{remaining.seconds // 3600}—á {(remaining.seconds // 60) % 60}–º"
            )
        else:
            lines.append("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω!")
    if transactions:
        lines.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
        for txn in transactions:
            lines.append(
                f"‚Ä¢ {txn.type}: {txn.amount} ({txn.created_at.strftime('%d.%m %H:%M')})"
            )
    if games:
        lines.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:")
        for game in games:
            lines.append(
                f"‚Ä¢ {game.game}: —Å—Ç–∞–≤–∫–∞ {game.bet}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ {game.payout}"
            )
    missions_ready = [m for m in overview.missions if m.completed_at and not m.claimed_at]
    if missions_ready:
        lines.append(
            "\n–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–≥—Ä–∞–¥: " + ", ".join(m.mission.title for m in missions_ready)
        )
    return "\n".join(lines)


@router.message(CommandStart())
async def cmd_start(message: Message, dispatcher: Dispatcher) -> None:
    ctx = _get_context(dispatcher)
    await ctx.economy.ensure_user(
        message.from_user.id,
        message.from_user.username,
        ctx.start_bonus,
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fantasy Casino!\n"
        "–í—Å–µ —Å—Ç–∞–≤–∫–∏ ‚Äî —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —á–∏–ø—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.",
        reply_markup=main_menu(),
    )


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    await message.answer(
        "üé≤ *Fantasy Casino* ‚Äî —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ —á–∏–ø–∞–º–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å\n"
        "/missions ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
        "/achievements ‚Äî –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "/daily ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        "/deposit ‚Äî –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ)\n"
        "/withdraw ‚Äî –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ (–º–æ–¥–µ—Ä–∞—Ü–∏—è)\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä.",
        parse_mode="Markdown",
    )


@router.message(Command("profile"))
async def cmd_profile(message: Message, dispatcher: Dispatcher) -> None:
    ctx = _get_context(dispatcher)
    text = await _format_profile(ctx, message.from_user.id)
    await message.answer(text, reply_markup=main_menu())



@router.callback_query(lambda c: c.data == "menu:main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await callback.answer()


@router.callback_query(lambda c: c.data == "menu:play")
async def menu_play(callback: CallbackQuery):
    from ..keyboards import game_selection

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=game_selection())
    await callback.answer()


@router.callback_query(lambda c: c.data == "menu:leaderboard")
async def menu_leaderboard(callback: CallbackQuery, dispatcher: Dispatcher) -> None:
    ctx = _get_context(dispatcher)
    leaders = await ctx.storage.get_leaderboard()
    if not leaders:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π."
    else:
        lines = ["üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:"]
        for idx, row in enumerate(leaders, start=1):
            username = row["username"] or row["telegram_id"]
            lines.append(f"{idx}. {username}: {row['winnings']}")
        text = "\n".join(lines)
    await callback.message.answer(text)
    await callback.answer()
